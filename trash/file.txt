	
	ns.ResourceProvider = function(variable, fragment, service) {
		this.variable = variable;
		this.fragment = fragment;
		this.service = service;
		this.prefixes = {};
	};


	ns.ResourceProvider.prototype.fetch = function(callback) {
		var queryStr = "Select * {" + this.fragment + "}"; 
		
		this.service.executeSelect(queryStr, callback);
	};

	ns.ResourceProvider.prototype.count = function(callback) {
		ns.count(this.getPreambel(), this.fragment, this.service, callback);
	};


	ns.count = function(preambel, fragment, service, callback) {
		var queryStr = preambel + "Select (Count(*) As ?count) {" + fragment + "}"; 
		
		service.executeSelect(queryStr, {
			failure: function() { callback.failure(); },
			success: function(json) { callback.success(json.results.bindings[0].count.value); }
		});	
	};

	ns.getPreambel = function(prefixes, map) {	
		var result = "";
		for(var i in prefixes) {
			var prefix = prefixes[i];
			
			var resolved = map[prefix];
			if(resolved) {
				result += "Prefix " + prefix + ": <" + resolved + ">\n";
			}
		}
		
		return result;
	};

	ns.ResourceProvider.prototype.getPreambel = function() {
		var ps = ns.extractPrefixes(this.fragment);
		return ns.getPreambel(ps, this.prefixes);
	};

	ns.ResourceProvider.prototype.list = function(callback, limit, offset) {
		
		var limitStr = !limit ? "" : " Limit " + limit;
		var offsetStr = !offset ? "" : " Offset " + offset;
		
		var queryStr = this.getPreambel() + "Select * {" + this.fragment + "}" + limitStr + offsetStr;
		
		this.service.executeSelect(queryStr, callback);
	};

	/**
	 * Check if the count of resources is greater than the given threshold 
	 * 
	 */
	ns.ResourceProvider.prototype.isCountGreater = function(threshold, callback) {
		var subQuery = "{ Select * {" + this.fragment + "} Limit " + (threshold + 1) + " }"; 
		
		
		ns.count(this.getPreambel(), subQuery, this.service, {
			failure: function() { callback.failure(); },
			success: function(count) { callback.success(count > threshold); }
		});
		
		//this.service.executeSelect(queryStr, {success: function(json) { callback.success(json.results.bindings[0].count.value); }});
		
	};

	
	ns.GeoResourceProvider = function(delegate, latVar, longVar, quadTree) {
		this.delegate = delegate;
		
		this.latVar = latVar;
		this.longVar = longVar;
		this.quadTree = quadTree;
		
		this.bounds = null;
	};

	ns.GeoResourceProvider.prototype.setBounds = function(bounds) {
		
	};
	
	ns.fetch = function() {
		
		console.log("Aquiring nodes for " + this.bounds);
		var nodes = this.quadTree.aquireNodes(this.bounds, 2);
		
		
		// We need to know which 'facets/property/paths' the underlying query returns, so that we can index accordingly
		// So fetching data can result in a query plan that yields a result set that first returns data from memory, and then the results of modified queries
		
		// Alternatively, we could geo-index a certain static query. But this means that whenever the facets change we have
		// To re-index everything again.

	};
	
	
	/*
	ns.ConstraintEquals = function(value) {
		this.value = value;
	};
	
	ns.ConstraintEquals.prototype.isSatisfiedBy = function(value) {
		return this.value.equals(value);
	};
	
	ns.ConstraintEquals.prototype.toString = function(value) {
		return "equals(" + this.value + ")";
	};
	*/
	
	
	ns.Table = function() {
		
	};
	
	ns.Table.add = function(row) {
		
	};
	
	ns.Table.addIndex = function(index) {
		
	};
	
	
	ns.Table.select = function(colToConstraint) {
	
	};
	
	
	
	ns.test = function() {
		console.log("test");
		
		var q = new ssb.Query();
		
		var ts = new ssb.ElementTriplesBlock();
		var p = ssb.Node.v("p");
		var t = new ssb.Triple(ssb.Node.uri("http://test.org"), p, ssb.Node.v("o"));
		ts.triples.push(t);
		
		q.elements.push(t);
		q.elements.push(new ssb.ElementFilter(new ssb.E_Equals(p, p)));
		

		console.log("Query = " + q);
		
		
	};



------




		//continue;		
		// Absolute approach
		//this.nodeToLabel.clear();

		for(var id in visible) {
			var label = id in idToLabel ? idToLabel[id] : "(no label)";
			
			this.nodeToLabel.put(id, label);
		}
		//console.log("NodeToLabel", this.nodeToLabel);
		//console.log("IdToLabel", idToLabel);
		//console.log("visible", visible);
			

		// (Clear boxes of loaded nodes just in case)
		// TODO Get rid of that
		
		
		
		// Add boxes for those nodes that have not been loaded
					
		// Remove markers of removed nodes
		for(var i in change.removedNodes) {
			var node = change.removedNodes[i];
			
			if(node.isLoaded) {
				var ids = _.keys(node.idToPos);					
				this.mapWidget.removeItems(ids);
			} else {
				this.mapWidget.removeBox(node.getBounds().toString());
			}
		}
	
	
		// Add markers of new nodes
		for(var i in change.addedNodes) {
			var node = change.addedNodes[i];
			
			//if(node.infMinItemCount && node.idToPos.length != 0) {
			if(node.isLoaded) {
				for(var id in node.idToPos) {
					var pos = node.idToPos[id];
					var lonlat = new OpenLayers.LonLat(pos.x, pos.y);
					//console.debug("Adding marker", id, pos, lonlat);
					
					this.mapWidget.addItem(id, lonlat, true);
				}
			} else {
				this.mapWidget.addBox(node.getBounds().toString(), toOpenLayersBounds(node.getBounds()));
			}
		}	

	//alert("Creating facet config for FTS");
	
	//var sparqlService = new VirtuosoSparqlService("http://localhost/sparql", ["http://fintrans.publicdata.eu/ec/"]);
/*
	var s = ssb.Node.v("s");
	var b = ssb.Node.v("b");
	var c = ssb.Node.v("c");
	var d = ssb.Node.v("d");
	var x = ssb.Node.v("x");
	var y = ssb.Node.v("y");
	
	
	//var p = ssb.Node.v("p");
	//var o = ssb.Node.v("o");

	var a = ssb.Node.uri("http://www.w3.org/1999/02/22-rdf-syntax-ns#type");		
	
	var subvention = ssb.Node.uri("http://fintrans.publicdata.eu/ec/ontology/Subvention");
	var beneficiary = ssb.Node.uri("http://fintrans.publicdata.eu/ec/ontology/beneficiary");
	var city = ssb.Node.uri("http://fintrans.publicdata.eu/ec/ontology/city");
	var sameAs = ssb.Node.uri("http://www.w3.org/2002/07/owl#sameAs");

	var long = ssb.Node.uri("http://www.w3.org/2003/01/geo/wgs84_pos#long");
	var lat = ssb.Node.uri("http://www.w3.org/2003/01/geo/wgs84_pos#lat");

	var rdfsLabel = ssb.Node.uri("http://www.w3.org/2000/01/rdf-schema#label");



	var config = new facets.FacetConfig(s, driver);		

	
	var l = ssb.Node.v("l");
	var varToLabelElement = new ssb.ElementTriplesBlock([new ssb.Triple(s, rdfsLabel, l)]); 
*/
	/*
	var triplesX = pathManager.toTriples("http://fintrans.publicdata.eu/ec/ontology/beneficiary http://fintrans.publicdata.eu/ec/ontology/city http://www.w3.org/2003/01/geo/wgs84_pos#long");
	console.log("Triples: ", triplesX.toString());
	
	var triplesY = pathManager.toTriples("http://fintrans.publicdata.eu/ec/ontology/beneficiary http://fintrans.publicdata.eu/ec/ontology/city http://www.w3.org/2003/01/geo/wgs84_pos#lat");
	console.log("Triples: ", triplesY.toString());
	*/
	
	//var test = varToLabelElement.copySubstitute(function(node) { if(node.isVar()) { return ssb.Node.v("blubb"); }});
	//alert("Test substitution of a variable: " + test.toString());

	//var fa = config.getOrCreate(beneficiary.toString(), )
	
	//var fa = new facets.Facet(config.getRoot(), "beneficiary", new ssb.ElementTriplesBlock([new ssb.Triple(s, beneficiary, b)]), s, varToLabelElement); 
	//var fb = new facets.Facet(fa, "city", new ssb.ElementTriplesBlock([new ssb.Triple(b, city, c)], s, varToLabelElement)); 
	//var fc = new facets.Facet(fb, "sameCityAs", new ssb.ElementTriplesBlock([new ssb.Triple(c, sameAs, d)], s, varToLabelElement)); 
	//var fd = new facets.Facet(fc, "geoLoc", new ssb.ElementTriplesBlock([new ssb.Triple(d, long, x), new ssb.Triple(d, lat, y)], s, varToLabelElement)); 

	/*
	var fd = new facets.FacetWgs.create("geoFacet", d, x, y); 

	var c = fd.constrainBBox("foo", new Bounds(0, 1, 2, 4));
	console.log("Constraint", c);
	var element = c.toElement();
	var str = element.toString();
	console.log("element str", str);
	*/
	
	
	//config.getRoot().addSubFacet("beneficiary", s, new ssb.ElementTriplesBlock([new ssb.Triple(s, beneficiary, b)]))
	
/*
 * [
 *   ?s bene ?b .
 *   ?b city ?c .
 *   ?c sameas ?d .
 *   {?d lat ?x; long ?y}
 * ]
 * 
 * */
	

	
	
	
	// Design Issues:
	
	// "The nature of facets"
	// A facet corresponds to a static SPARQL query element. Static means, that a facet is not intended to be instanciated
	// (instanciate could mean: creating a copy of the query fragment with variables renamed (except for the driverVar).
	// The variables of the query element can be constrained.
	// A facet can be "enforced" i.e. the query element must be part of the final query, even if it is not constrained.

	// Selection order within the geo-facet path:
	// Is it a path or a tree?
	
	// How to deal with histograms??? -> Maybe use the facet value concept again? No, because a value may fall into the range of a facet group.
	
	// Should every element of the path contain its whole sequence of predecessors?

	// Issue [Multiple constraints on the same facets]
	// This should usually result in a logical or between all the constraints - but is that reasonable in all cases?
	
	// Issue [Constraints on connected/dependent facets]
	
	
	
	// eventually, we end up with a geofacet --- maybe a shallow triple pattern parser would help us?
	
	
	
	//var element = new ssb.ElementTriplesBlock([new ssb.Triple(s, p, o)]);
	
	
				/*
			console.log(graph);
			
		
			var pso = {};
			
			for(var j = 0; j < graph.length; ++j) {
				var triple = graph[j];
				
				var p = triple.p.toString();
				var so;
				if(p in pso) {
					so = pso[p];
				} else {
					pso[p] = so = {};
				}
				
				var s = triple.s.toString();
				var o;
				if(s in so) {
					o = so[s];
				} else {
					so[s] = o = [];
				}
				
				o.push(triple.o);				
			}

			var long = pso[geo.log];
			var lat = pso[geo.lat];
			var geomToCoord = {};
			
			for(var k in long) {
				var ys = long[k];
				var xs = lat[k];
				
				if(xs && ys && ys.length == 1 && xs.length == 1) {
					geomToCoord[k] = new OpenLayers.LonLat(xs[0], ys[0]);
				}
			}
			
			console.log(geomToCoord);
			//var geoRelated = pso[geovocab.geometry.toString()];
			*/
	
	
	ns.diffOld = function(oldNodes, newNodes, oldBounds, newBounds) {
		
		var involvedNodes = _.union(oldNodes, newNodes);
	
		var addedNodes    = _.difference(newNodes, oldNodes);
		var removedNodes  = _.difference(oldNodes, newNodes);
		var retainedNodes = _.intersection(newNodes, oldNodes);
			
		// The changes for each of the newNodes that occurred to partially covers
		// Does not contain changes 
		var removedItemsPerNode = [];
		var addedItemsPerNode = [];

		var isLocked = false;
		
		// If a node went out of sight, then all items can be removed
		/*
		for(var i in removedNodes) {
			var removedNode = removedNodes[i];
			mergeMapsInPlace(removedItems, removedNode.idToPos);
		}*/
	
		var RETAINED = 0;
		var ADDED = 1;
		var REMOVED = 2;
		
		var involvedNodeStatus = [];
		
		// Filter existing markers by the new bounds
		//$.each(this.currentNodes, function(i, node) {
		for(var i in involvedNodes) {
			var node = involvedNodes[i];
			
			var addedItems = {};
			var removedItems = {};
			
			addedItemsPerNode[i] = addedItems;
			removedItemsPerNode[i] = removedItems;
	
	
			if(!node.idToPos) {
				return true;
			}
			
			var status = -1;
			if(_.contains(retainedNodes, node)) {
				status = RETAINED;
			} else if(_.contains(addedNodes, node)) {
				status = ADDED;
			} else if(_.contains(removedNodes, node)) {
				status = REMOVED;
			} else {
				console.error("Should not happen");
			}
			
			involvedNodeStatus[i] = status;
			
			//console.log("Status: ", status, " for " + node);
	
			/*
			if(status === RETAINED) {
				if(newBounds.contains(node.getBounds()) && oldBounds && oldBounds.contains(node.getBounds())) {			
					continue;
				}
			}*/
			
			// If the node was - and still is fully contained in the view rect - , we can skip a check
			// as all items must be within the new bounds
			// TODO For some reason the commented out code below is not working as expected, determine why
			if(status === RETAINED) {
				if(newBounds.contains(node.getBounds()) && oldBounds && oldBounds.contains(node.getBounds())) {			
					continue;
				}
	
				if(!node.idToPos) {
					continue;
				}
				
				for(id in node.idToPos) {
					var pos = node.idToPos[id];
	
					if((!oldBounds || !QuadTreeModel._isVisible(id, pos, oldBounds, oldNodes)) && newBounds.containsPoint(pos)) {
						addedItems[id] = pos;
					} else if(oldBounds && QuadTreeModel._isVisible(id, pos, oldBounds, oldNodes) && !newBounds.containsPoint(pos)) {
						removedItems[id] = pos;
					}
					/*
					if((!oldBounds || !oldBounds.containsPoint(pos)) && newBounds.containsPoint(pos)) {
						addedItems[id] = pos;
					} else if(oldBounds && oldBounds.containsPoint(pos) && !newBounds.containsPoint(pos)) {
						removedItems[id] = pos;
					}
					*/
				}
			} else if(status === ADDED) {
				for(id in node.idToPos) {
					var pos = node.idToPos[id];
					// Check if the id was visible before (due to some other node)
					if((!oldBounds || !QuadTreeModel._isVisible(id, pos, oldBounds, oldNodes)) && newBounds.containsPoint(pos)) {
						addedItems[id] = pos;
					}			
				}
			} else if(status === REMOVED) {
				for(id in node.idToPos) {
					var pos = node.idToPos[id];
					if(oldBounds && QuadTreeModel._isVisible(id, pos, oldBounds, oldNodes)) {
						removedItems[id] = pos;
					}
				}
			}
			
	
			/*
			for(id in node.idToPos) {
				var pos = node.idToPos[id];
	
				// TODO This does not work when zooming in: a point the becomes visible may
				// have been within the old bounds, but due to too many items it was not loaded
				if(!oldBounds || !oldBounds.containsPoint(pos) && newBounds.containsPoint(pos)) {
					addedItems[id] = pos;
				} else if(oldBounds && oldBounds.containsPoint(pos) && !newBounds.containsPoint(pos)) {
					removedItems[id] = pos;
				}
			}*/
	
			
			/*
			for(id in node.idToPos) {
				var pos = node.idToPos[id];
	
				if((!oldBounds || !QuadTreeModel._isVisible(id, pos, oldBounds, oldNodes)) && newBounds.containsPoint(pos)) {
					addedItems[id] = pos;
				} else if(oldBounds && QuadTreeModel._isVisible(id, pos, oldBounds, oldNodes) && !newBounds.containsPoint(pos)) {
					removedItems[id] = pos;
				}
			}*/
		}
	
		//if(!(added.length == 0 && removed.length == 0)) {
		return {
			oldBounds    : oldBounds,
			newBounds    : newBounds,
			oldNodes     : oldNodes,
			newNodes     : newNodes,
			addedNodes   : addedNodes,
			removedNodes : removedNodes,
			
			involvedNodes: involvedNodes,
			involvedNodeStatus: involvedNodeStatus,
			addedItemsPerNode   : addedItemsPerNode,
			removedItemsPerNode : removedItemsPerNode
		};		
	};
	