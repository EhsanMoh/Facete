<?php
    $locale = isset($_GET["lang"]) ? $_GET["lang"] : 'en';
    
    // begins with http -> absolute, else relative
    $endpoint = isset($_REQUEST['endpoint']) ? $_REQUEST['endpoint'] : '/sparql';
    
    // empty means use it all
    $graph    = isset($_REQUEST['default-graph-uri']) ? $_REQUEST['default-graph-uri'] : '';
    
    
    $endpoint = "http://localhost/sparql";
    // LGD-TEST
    //$endpoint = "http://localhost/lgd/sparql";
    
    
?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html class="js" lang="en" dir="ltr" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

		<link rel="stylesheet" href="lib/twitter-bootstrap/2.0.3/css/bootstrap.min.css" /> 

        <script type="text/javascript"
            src="lib/namespacedotjs/a28da387ce/Namespace.js"></script>

        <script type="text/javascript" src="lib/jquery/1.7.2/jquery-1.7.2.js"></script>

        <script type="text/javascript"
            src="lib/underscore/1.3.1/underscore.js"></script>

        <script type="text/javascript" src="lib/agility/0.1.2/agility.min.js"
            charset="utf-8"></script>


	<script type="text/javascript"
		src="src/main/javascript/org/aksw/ssb/backend/SparqlServiceHttp.js"></script>

	<script type="text/javascript"
		src="src/main/javascript/org/aksw/ssb/backend/SparqlServicePaginator.js"></script>

	<script type="text/javascript"
		src="src/main/javascript/org/aksw/ssb/sparql/Syntax.js"></script>

	<script type="text/javascript"
		src="src/main/javascript/org/aksw/ssb/vocabs/xsd.js"></script>

	<script type="text/javascript"
		src="src/main/javascript/org/aksw/ssb/vocabs/rdf.js"></script>
    
	<script type="text/javascript"
		src="src/main/javascript/org/aksw/ssb/vocabs/rdfs.js"></script>
    
	<script type="text/javascript"
		src="src/main/javascript/org/aksw/ssb/vocabs/owl.js"></script>

	<script type="text/javascript"
		src="src/main/javascript/org/aksw/ssb/vocabs/wgs84.js"></script>
    
	<script type="text/javascript"
		src="src/main/javascript/org/aksw/ssb/vocabs/geovocab.js"></script>

	<script type="text/javascript"
		src="src/main/javascript/org/aksw/ssb/vocabs/appvocab.js"></script>

	<script type="text/javascript"
		src="src/main/javascript/org/aksw/ssb/facets/Facets.js"></script>

	<script type="text/javascript"
		src="src/main/javascript/org/aksw/ssb/facets/Constraints.js"></script>

	<script type="text/javascript"
		src="src/main/javascript/org/aksw/ssb/facets/QueryGenerationUtils.js"></script>

	<script type="text/javascript"
		src="src/main/javascript/org/aksw/ssb/facets/QueryExecutionUtils.js"></script>

	<script type="text/javascript"
		src="src/main/javascript/org/aksw/ssb/collections/MultiMap.js"></script>

	<script type="text/javascript"
		src="src/main/javascript/org/aksw/ssb/collections/LabelCollection.js"></script>


	<script type="text/javascript"
		src="src/main/javascript/org/aksw/ssb/utils/LabelFetcher.js"></script>

	<script type="text/javascript"
		src="src/main/javascript/org/aksw/ssb/widgets/ListWidgetBase.js"></script>

	<script type="text/javascript"
		src="src/main/javascript/org/aksw/ssb/widgets/ListWidgetSparql.js"></script>

	<script type="text/javascript" 
		src="src/main/javascript/Dispatcher.js"></script>

	
	<script type="text/javascript">

		var backend = Namespace("org.aksw.ssb.backend");
		var queryUtils = Namespace("org.aksw.ssb.facets.QueryUtils");
		var widgets = Namespace("org.aksw.ssb.widgets");
		var sparql = Namespace("org.aksw.ssb.sparql.syntax");
		var utils = Namespace("org.aksw.ssb.utils");
		var facets = Namespace("org.aksw.ssb.facets");
		var rdf = Namespace("org.aksw.ssb.vocabs.rdf");


		var testExecutioner = function() {
			var service = new backend.SparqlServiceVirtuoso("http://localhost/sparql");
			
			
	    	var labelFetcher = new utils.LabelFetcher(service, ["en"]); 

	    	var driverVar = sparql.Node.v("c");
	    	var someClass = sparql.Node.uri("http://fintrans.publicdata.eu/ec/ontology/Subvention");
	    	//var driverElement = queryUtils.createElementGetClasses(driverVar);
	    	
	    	var driverElement = new sparql.ElementTriplesBlock([new sparql.Triple(driverVar, rdf.type, someClass)]);
	    	
	    	//var driverElement = queryUtils.createElementGetNamedGraphsFallback(driverVar);
	    	var driver = new facets.Driver(driverElement, driverVar);

			var focusPath = facets.Path.fromString("");
	    	//var navigationPath = facets.Path.fromString("http://fintrans.publicdata.eu/ec/ontology/beneficiary <^");
	    	var navigationPath = facets.Path.fromString(""); //http://fintrans.publicdata.eu/ec/ontology/year");

	    	
			var queryGenerator = new widgets.QueryGenerator(driver, navigationPath, focusPath);
	    	

	    	queryGenerator.getConstraints().add(new facets.ConstraintEquals(facets.Path.fromString("http://fintrans.publicdata.eu/ec/ontology/year"), sparql.Node.uri("http://dbpedia.org/resource/2007")));
	    	//queryGenerator.getConstraints().add(new facets.ConstraintEquals(facets.Path.fromString("http://fintrans.publicdata.eu/ec/ontology/year"), sparql.Node.uri("http://dbpedia.org/resource/2010")));
	    	queryGenerator.getConstraints().add(new facets.ConstraintEquals(facets.Path.fromString("http://fintrans.publicdata.eu/ec/ontology/expenseType"), sparql.Node.uri("http://fintrans.publicdata.eu/ec/resource/operational")));


	    	queryGenerator = queryGenerator.copyExcludeConstraint(facets.Path.fromString("http://fintrans.publicdata.eu/ec/ontology/expenseType"));

	    	//console.log("navigationPath", navigationPath);
	    	
			//var path = facets.Path.fromString("http://www.w3.org/2000/01/rdf-schema#label");


			
			//console.log("Path: ", path);

			var executioner = new widgets.QueryExecutioner(service, queryGenerator);

			//executioner = executioner.navigateToFacets(-1);
			//executioner = executioner.navigateToFacetValues();

			//console.log("executioner", executioner);
			
			//var promise = executioner.fetchValuesCounted();
			var promise = executioner.fetchPivotFacets(true); //executioner.fetchCountValues();

			$.when(promise).then(function(data) {
				console.log("Executioner result:", data);
			}).fail(function() {
				alert("Something went wrong");
			}); 
			
			
		};


		
		var testQueryGenerator = function() {
			var service = new backend.SparqlServiceVirtuoso("http://localhost/sparql");
			
			
	    	var labelFetcher = new utils.LabelFetcher(service, ["en"]); 

	    	var driverVar = sparql.Node.v("c");
	    	var someClass = sparql.Node.uri("http://fintrans.publicdata.eu/ec/ontology/Subvention");
	    	//var driverElement = queryUtils.createElementGetClasses(driverVar);
	    	
	    	var driverElement = new sparql.ElementTriplesBlock([new sparql.Triple(driverVar, rdf.type, someClass)]);
	    	
	    	//var driverElement = queryUtils.createElementGetNamedGraphsFallback(driverVar);
	    	var driver = new facets.Driver(driverElement, driverVar);

			var focusPath = facets.Path.fromString("");
	    	var navigationPath = facets.Path.fromString("http://fintrans.publicdata.eu/ec/ontology/beneficiary <^");
			//var path = facets.Path.fromString("http://www.w3.org/2000/01/rdf-schema#label");
			var queryGenerator = new widgets.QueryGenerator(driver, navigationPath, focusPath);
			//console.log("Path: ", path);


			console.log("Count query: " + queryGenerator.createQueryCountNavigation());

			console.log("Copy:", queryGenerator.copy());
			
			
			//queryGenerator = queryGenerator.copyNavigate(path);

			//var postProcessor = new widgets.PostProcessorLabels(labelFetcher);

			
			//var model = new widgets.ListModelSparql(service, queryGenerator, {distinct: true}, function(deferred, collection) { postProcessor.process(deferred, collection); });
			

			var model = widgets.createListModelLabels(service, queryGenerator, {distinct: true}, labelFetcher);
			
			var listWidget = widgets.createListWidget(model, widgets.checkItemFactory);

			listWidget.bind("click", function(ev, payload) {
				alert(payload.checked + " " + payload.item.model.get("label"));
			});

			$$.document.append(listWidget);
			
		};

		var testListWidget = function() {

	    	
	    	var labelFetcher = new utils.LabelFetcher(service, ["en"]); 

	    	var driverVar = sparql.Node.v("c");
	    	var driverElement = queryUtils.createElementGetClasses(driverVar);
	    	//var driverElement = queryUtils.createElementGetNamedGraphsFallback(driverVar);
	    	var driver = new facets.Driver(driverElement, driverVar);

			var queryGenerator = new widgets.QueryGenerator(null, driver);
	    	
			var model = new widgets.ListModelSparql(service, queryGenerator, {distinct: true}, labelFetcher);
			var listWidget = widgets.createListWidget(model, widgets.checkItemFactory);

			listWidget.bind("click", function(ev, payload) {
				alert(payload.checked + " " + payload.item.model.get("label"));
			});

			$$.document.append(listWidget);
			
		};

		/*
		$(document).ready(function() {

			testExecutioner();	
	
		});*/
		
		
		/*
		 * Fetch named graphs
		 */		
    	$(document).ready(function() {

    		var skip = true;
    		
    		if(skip) {
        		return;
    		}

    		
    		var backend = Namespace("org.aksw.ssb.backend");
	    	var queryUtils = Namespace("org.aksw.ssb.facets.QueryUtils");

	    	var service = new backend.SparqlServiceVirtuoso("http://localhost/sparql", "");
	    	queryUtils.fetchClasses(service).pipe(function(classes) {
		    	console.log("Classes:", classes);
	    	});    		
    	});


		/*
		 * Fetch classes
		 */
    	$(document).ready(function() {

    		var skip = true;
    		
    		if(skip) {
        		return;
    		}
    		
    		var backend = Namespace("org.aksw.ssb.backend");
	    	var queryUtils = Namespace("org.aksw.ssb.facets.QueryUtils");

	    	var tmp = new backend.SparqlServiceVirtuoso("http://localhost/sparql", "");
			var service = new backend.SparqlServicePaginator(tmp, 1000);

	    	queryUtils.fetchNamedGraphs(service).pipe(function(graphNames) {
		    	console.log("Named graphs:", graphNames);
	    	});
    		
        	
    	});
    	
    	
	    $(document).ready(function() {

    		var skip = false;
    		
    		if(skip) {
        		return;
    		}
	    	
	    	/*
	    	 * A test that uses SPARQL pagination
	    	 */
		    
	    	var sparql = Namespace("org.aksw.ssb.sparql.syntax");
	    	var backend = Namespace("org.aksw.ssb.backend");
	    	var rdf = Namespace("org.aksw.ssb.vocabs.rdf");
	    	
	    	var query = new sparql.Query();
			var s = sparql.Node.v("s");
			var p = rdf.type; //sparql.Node.v("p");
			var o = sparql.Node.v("o");
	    	
	    	query.isResultStar = true;
	    	query.elements.push(new sparql.ElementTriplesBlock([new sparql.Triple(s, p, o)])); 
			query.limit = 200000;
	    	
	    	var tmp = new backend.SparqlServiceHttp("http://localhost/sparql", "");
			var service = new backend.SparqlServicePaginator(tmp, 1000);

	    	$.when(service.executeSelect(query)).then(function(talisRdfJson) {
		    	alert("size: " + talisRdfJson.results.bindings.length);
	    	});
			
	    });	
	</script>

    </head>
    <body>
	
    </body>
</html>
